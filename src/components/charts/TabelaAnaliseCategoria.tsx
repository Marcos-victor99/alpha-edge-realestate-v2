import React, { useMemo, useState } from 'react';\nimport {\n  Cell,\n  PieChart,\n  Pie,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  LineChart,\n  Line\n} from 'recharts';\nimport { Card, Title, Text, Flex, Badge, Button, Metric } from '@tremor/react';\nimport { \n  Table, \n  ArrowUpDown, \n  TrendingUp, \n  TrendingDown, \n  Minus,\n  Eye,\n  BarChart3,\n  PieChart as PieChartIcon,\n  Download,\n  Filter\n} from 'lucide-react';\nimport { \n  useFaturamentoData, \n  useInadimplenciaData, \n  useMovimentacoesFinanceiras, \n  usePagamentoEmpreendedor \n} from '@/hooks/useFinancialData';\nimport { CATEGORY_PALETTE, SOFT_COLORS } from '@/lib/chart-colors';\nimport { formatarMoeda, formatarData, formatarVariacao } from '@/lib/formatters';\n\ninterface TabelaAnalisieCategoriaProps {\n  tipoAnalise?: 'faturamento' | 'inadimplencia' | 'movimentacoes' | 'fornecedores';\n  agrupamento?: 'categoria' | 'shopping' | 'locatario' | 'fornecedor';\n  limite?: number;\n  showMiniCharts?: boolean;\n  showComparison?: boolean;\n  onCategoryClick?: (categoria: string) => void;\n  onExport?: () => void;\n}\n\ninterface CategoriaAnalise {\n  categoria: string;\n  subcategoria?: string;\n  valor: number;\n  valorAnterior: number;\n  variacao: number;\n  percentual: number;\n  quantidade: number;\n  valorMedio: number;\n  tendencia: 'crescimento' | 'declinio' | 'estavel';\n  status: 'excelente' | 'bom' | 'regular' | 'critico';\n  cor: string;\n  dadosTemporais: { periodo: string; valor: number }[];\n  metricas: {\n    maiorValor: number;\n    menorValor: number;\n    desviosPadrao: number;\n    frequencia: number;\n  };\n  detalhes: {\n    principalItem: string;\n    ultimaMovimentacao: string;\n    observacoes: string;\n  };\n}\n\nconst TabelaAnaliseCategoria: React.FC<TabelaAnalisieCategoriaProps> = ({\n  tipoAnalise = 'faturamento',\n  agrupamento = 'categoria',\n  limite = 10,\n  showMiniCharts = true,\n  showComparison = true,\n  onCategoryClick,\n  onExport\n}) => {\n  const { data: faturamento, isLoading: fatLoading } = useFaturamentoData();\n  const { data: inadimplencia, isLoading: inadLoading } = useInadimplenciaData();\n  const { data: movimentacoes, isLoading: movLoading } = useMovimentacoesFinanceiras();\n  const { data: pagamentos, isLoading: pagLoading } = usePagamentoEmpreendedor();\n  \n  const [ordenacao, setOrdenacao] = useState<'valor' | 'variacao' | 'quantidade' | 'categoria'>('valor');\n  const [direcaoOrdem, setDirecaoOrdem] = useState<'asc' | 'desc'>('desc');\n  const [filtroStatus, setFiltroStatus] = useState<'todos' | 'excelente' | 'bom' | 'regular' | 'critico'>('todos');\n  const [mostrarDetalhes, setMostrarDetalhes] = useState<string | null>(null);\n\n  const isLoading = fatLoading || inadLoading || movLoading || pagLoading;\n\n  // ðŸ“Š Processar dados baseado no tipo de anÃ¡lise\n  const dadosProcessados = useMemo(() => {\n    const categorias: Record<string, CategoriaAnalise> = {};\n    let corIndex = 0;\n    \n    const adicionarCategoria = (\n      categoria: string,\n      valor: number,\n      quantidade: number = 1,\n      periodo: string = '',\n      detalhes?: { principalItem?: string; ultimaMovimentacao?: string; observacoes?: string }\n    ) => {\n      if (!categorias[categoria]) {\n        categorias[categoria] = {\n          categoria,\n          valor: 0,\n          valorAnterior: 0,\n          variacao: 0,\n          percentual: 0,\n          quantidade: 0,\n          valorMedio: 0,\n          tendencia: 'estavel',\n          status: 'regular',\n          cor: CATEGORY_PALETTE[corIndex % CATEGORY_PALETTE.length],\n          dadosTemporais: [],\n          metricas: {\n            maiorValor: 0,\n            menorValor: Number.MAX_VALUE,\n            desviosPadrao: 0,\n            frequencia: 0\n          },\n          detalhes: {\n            principalItem: '',\n            ultimaMovimentacao: '',\n            observacoes: ''\n          }\n        };\n        corIndex++;\n      }\n      \n      categorias[categoria].valor += valor;\n      categorias[categoria].quantidade += quantidade;\n      \n      // Atualizar mÃ©tricas\n      if (valor > categorias[categoria].metricas.maiorValor) {\n        categorias[categoria].metricas.maiorValor = valor;\n      }\n      if (valor < categorias[categoria].metricas.menorValor) {\n        categorias[categoria].metricas.menorValor = valor;\n      }\n      \n      // Adicionar dados temporais\n      if (periodo) {\n        const existingPeriod = categorias[categoria].dadosTemporais.find(d => d.periodo === periodo);\n        if (existingPeriod) {\n          existingPeriod.valor += valor;\n        } else {\n          categorias[categoria].dadosTemporais.push({ periodo, valor });\n        }\n      }\n      \n      // Atualizar detalhes\n      if (detalhes) {\n        if (!categorias[categoria].detalhes.principalItem || valor > categorias[categoria].valor * 0.3) {\n          categorias[categoria].detalhes = {\n            principalItem: detalhes.principalItem || categorias[categoria].detalhes.principalItem,\n            ultimaMovimentacao: detalhes.ultimaMovimentacao || categorias[categoria].detalhes.ultimaMovimentacao,\n            observacoes: detalhes.observacoes || categorias[categoria].detalhes.observacoes\n          };\n        }\n      }\n    };\n\n    // Processar baseado no tipo de anÃ¡lise\n    if (tipoAnalise === 'faturamento' && faturamento) {\n      faturamento.forEach(fat => {\n        const chave = agrupamento === 'categoria' ? (fat.categoria || 'Sem Categoria') :\n                     agrupamento === 'shopping' ? (fat.shopping || 'Sem Shopping') :\n                     agrupamento === 'locatario' ? (fat.locatario || 'Sem LocatÃ¡rio') :\n                     (fat.categoria || 'Geral');\n        \n        const valor = Number(fat.valortotalfaturado) || 0;\n        const periodo = fat.mesanofaturamento || '';\n        \n        adicionarCategoria(chave, valor, 1, periodo, {\n          principalItem: fat.locatario || '',\n          ultimaMovimentacao: fat.datavencimento || '',\n          observacoes: `Status: ${fat.statuscliente || 'N/A'}`\n        });\n      });\n    }\n    \n    else if (tipoAnalise === 'inadimplencia' && inadimplencia?.records) {\n      inadimplencia.records.forEach(inad => {\n        const chave = agrupamento === 'shopping' ? (inad.Shopping || 'Sem Shopping') :\n                     agrupamento === 'locatario' ? (inad.Locatario || 'Sem LocatÃ¡rio') :\n                     'InadimplÃªncia';\n        \n        const valor = Number(inad.Inadimplencia) || 0;\n        const dataCompetencia = inad.DataCompetenciaInicio || '';\n        const periodo = dataCompetencia ? dataCompetencia.substring(0, 7) : ''; // YYYY-MM\n        \n        adicionarCategoria(chave, valor, 1, periodo, {\n          principalItem: inad.Locatario || '',\n          ultimaMovimentacao: inad.DataVencimento || '',\n          observacoes: `Parcela: ${inad.Parcela || 'N/A'}`\n        });\n      });\n    }\n    \n    else if (tipoAnalise === 'movimentacoes' && movimentacoes) {\n      movimentacoes.forEach(mov => {\n        const setor = mov.Setor || 'Geral';\n        const chave = agrupamento === 'shopping' ? (mov.Shopping || 'Sem Shopping') :\n                     setor;\n        \n        const credito = Number(mov.Credito) || 0;\n        const debito = Number(mov.Debito) || 0;\n        const valor = credito - debito; // Saldo lÃ­quido\n        const periodo = mov.Data ? mov.Data.substring(0, 7) : ''; // YYYY-MM\n        \n        adicionarCategoria(chave, valor, 1, periodo, {\n          principalItem: mov.Fornecedor || mov.RazaoSocial || '',\n          ultimaMovimentacao: mov.Data || '',\n          observacoes: `Conta: ${mov.Conta || 'N/A'}`\n        });\n      });\n    }\n    \n    else if (tipoAnalise === 'fornecedores' && pagamentos) {\n      pagamentos.forEach(pag => {\n        const chave = agrupamento === 'categoria' ? (pag.tipodocumento || 'Sem Tipo') :\n                     agrupamento === 'shopping' ? (pag.shopping || 'Sem Shopping') :\n                     agrupamento === 'fornecedor' ? (pag.fornecedor || 'Sem Fornecedor') :\n                     (pag.tipodocumento || 'Geral');\n        \n        const valor = Number(pag.valorcp) || 0;\n        const periodo = pag.dataemissao ? pag.dataemissao.substring(0, 7) : ''; // YYYY-MM\n        \n        adicionarCategoria(chave, valor, 1, periodo, {\n          principalItem: pag.fornecedor || '',\n          ultimaMovimentacao: pag.dataemissao || '',\n          observacoes: `CP: ${pag.numerocp || 'N/A'}`\n        });\n      });\n    }\n\n    // Processar mÃ©tricas finais\n    const totalGeral = Object.values(categorias).reduce((sum, cat) => sum + Math.abs(cat.valor), 0);\n    \n    return Object.values(categorias).map(cat => {\n      // Calcular valor mÃ©dio\n      cat.valorMedio = cat.quantidade > 0 ? cat.valor / cat.quantidade : 0;\n      \n      // Calcular percentual\n      cat.percentual = totalGeral > 0 ? (Math.abs(cat.valor) / totalGeral) * 100 : 0;\n      \n      // Ordenar dados temporais\n      cat.dadosTemporais.sort((a, b) => a.periodo.localeCompare(b.periodo));\n      \n      // Calcular tendÃªncia baseada nos Ãºltimos perÃ­odos\n      if (cat.dadosTemporais.length >= 2) {\n        const ultimoValor = cat.dadosTemporais[cat.dadosTemporais.length - 1].valor;\n        const penultimoValor = cat.dadosTemporais[cat.dadosTemporais.length - 2].valor;\n        const diferenca = ultimoValor - penultimoValor;\n        \n        cat.valorAnterior = penultimoValor;\n        cat.variacao = penultimoValor !== 0 ? (diferenca / penultimoValor) * 100 : 0;\n        \n        if (Math.abs(cat.variacao) < 5) {\n          cat.tendencia = 'estavel';\n        } else if (cat.variacao > 0) {\n          cat.tendencia = 'crescimento';\n        } else {\n          cat.tendencia = 'declinio';\n        }\n      }\n      \n      // Determinar status baseado na performance\n      if (cat.percentual >= 20 && cat.tendencia === 'crescimento') {\n        cat.status = 'excelente';\n      } else if (cat.percentual >= 10 && cat.tendencia !== 'declinio') {\n        cat.status = 'bom';\n      } else if (cat.percentual >= 5) {\n        cat.status = 'regular';\n      } else {\n        cat.status = 'critico';\n      }\n      \n      return cat;\n    }).filter(cat => cat.valor !== 0);\n  }, [tipoAnalise, agrupamento, faturamento, inadimplencia, movimentacoes, pagamentos]);\n\n  // ðŸ”„ Filtrar e ordenar dados\n  const dadosFiltrados = useMemo(() => {\n    let dados = dadosProcessados;\n    \n    // Filtro por status\n    if (filtroStatus !== 'todos') {\n      dados = dados.filter(cat => cat.status === filtroStatus);\n    }\n    \n    // OrdenaÃ§Ã£o\n    dados.sort((a, b) => {\n      let comparison = 0;\n      \n      switch (ordenacao) {\n        case 'variacao':\n          comparison = a.variacao - b.variacao;\n          break;\n        case 'quantidade':\n          comparison = a.quantidade - b.quantidade;\n          break;\n        case 'categoria':\n          comparison = a.categoria.localeCompare(b.categoria);\n          break;\n        default:\n          comparison = Math.abs(a.valor) - Math.abs(b.valor);\n      }\n      \n      return direcaoOrdem === 'desc' ? -comparison : comparison;\n    });\n    \n    return dados.slice(0, limite);\n  }, [dadosProcessados, filtroStatus, ordenacao, direcaoOrdem, limite]);\n\n  // ðŸ“ˆ MÃ©tricas gerais\n  const metricas = useMemo(() => {\n    if (dadosFiltrados.length === 0) return null;\n    \n    const totalValor = dadosFiltrados.reduce((sum, cat) => sum + Math.abs(cat.valor), 0);\n    const totalQuantidade = dadosFiltrados.reduce((sum, cat) => sum + cat.quantidade, 0);\n    const categoriaDestaque = dadosFiltrados[0];\n    const mediaVariacao = dadosFiltrados.reduce((sum, cat) => sum + cat.variacao, 0) / dadosFiltrados.length;\n    \n    const categoriasExcelentes = dadosFiltrados.filter(cat => cat.status === 'excelente').length;\n    const categoriasCriticas = dadosFiltrados.filter(cat => cat.status === 'critico').length;\n    \n    return {\n      totalValor,\n      totalQuantidade,\n      categoriaDestaque,\n      mediaVariacao,\n      categoriasExcelentes,\n      categoriasCriticas,\n      ticketMedio: totalQuantidade > 0 ? totalValor / totalQuantidade : 0\n    };\n  }, [dadosFiltrados]);\n\n  // ðŸŽ¨ Mini Chart Components\n  const MiniPieChart = ({ data }: { data: CategoriaAnalise }) => (\n    <div className=\"w-12 h-12\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={[{ value: data.percentual }, { value: 100 - data.percentual }]}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={8}\n            outerRadius={20}\n            startAngle={90}\n            endAngle={450}\n            dataKey=\"value\"\n          >\n            <Cell fill={data.cor} />\n            <Cell fill=\"#f0f0f0\" />\n          </Pie>\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n\n  const MiniLineChart = ({ data }: { data: CategoriaAnalise }) => (\n    <div className=\"w-16 h-8\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={data.dadosTemporais.slice(-6)}>\n          <Line \n            type=\"monotone\" \n            dataKey=\"valor\" \n            stroke={data.cor} \n            strokeWidth={2}\n            dot={false}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n\n  const handleOrdenar = (campo: typeof ordenacao) => {\n    if (ordenacao === campo) {\n      setDirecaoOrdem(direcaoOrdem === 'desc' ? 'asc' : 'desc');\n    } else {\n      setOrdenacao(campo);\n      setDirecaoOrdem('desc');\n    }\n  };\n\n  const getStatusIcon = (tendencia: CategoriaAnalise['tendencia']) => {\n    switch (tendencia) {\n      case 'crescimento':\n        return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n      case 'declinio':\n        return <TrendingDown className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Minus className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: CategoriaAnalise['status']) => {\n    const statusConfig = {\n      excelente: { bg: 'bg-green-50', text: 'text-green-700', label: 'Excelente' },\n      bom: { bg: 'bg-blue-50', text: 'text-blue-700', label: 'Bom' },\n      regular: { bg: 'bg-yellow-50', text: 'text-yellow-700', label: 'Regular' },\n      critico: { bg: 'bg-red-50', text: 'text-red-700', label: 'CrÃ­tico' }\n    };\n    \n    const config = statusConfig[status];\n    return (\n      <Badge size=\"xs\" className={`${config.bg} ${config.text}`}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4, 5].map(i => (\n              <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  if (dadosFiltrados.length === 0) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"text-center text-gray-500\">\n          <Table className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n          <p>Nenhum dado encontrado para anÃ¡lise por categoria</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-6\">\n      {/* Header */}\n      <Flex alignItems=\"start\" justifyContent=\"between\" className=\"mb-6\">\n        <div className=\"flex-1\">\n          <Flex alignItems=\"center\" justifyContent=\"start\" className=\"gap-2 mb-2\">\n            <div className=\"p-2 rounded-lg bg-violet-50 dark:bg-violet-950/20\">\n              <Table className=\"h-5 w-5 text-violet-600 dark:text-violet-400\" />\n            </div>\n            <div>\n              <Title className=\"text-lg font-semibold\">\n                AnÃ¡lise Detalhada por {agrupamento === 'categoria' ? 'Categoria' : \n                                        agrupamento === 'shopping' ? 'Shopping' :\n                                        agrupamento === 'locatario' ? 'LocatÃ¡rio' : 'Fornecedor'}\n              </Title>\n              <Text className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {tipoAnalise === 'faturamento' ? 'AnÃ¡lise de faturamento' :\n                 tipoAnalise === 'inadimplencia' ? 'AnÃ¡lise de inadimplÃªncia' :\n                 tipoAnalise === 'movimentacoes' ? 'AnÃ¡lise de movimentaÃ§Ãµes' :\n                 'AnÃ¡lise de fornecedores'} com mÃ©tricas detalhadas\n              </Text>\n            </div>\n          </Flex>\n\n          {/* MÃ©tricas resumo */}\n          {metricas && (\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mt-4\">\n              <div className=\"bg-violet-50 p-3 rounded-lg\">\n                <Text className=\"text-xs text-violet-700 font-medium\">Total Analisado</Text>\n                <Metric className=\"text-violet-800\">\n                  {formatarMoeda(metricas.totalValor)}\n                </Metric>\n              </div>\n              \n              <div className=\"bg-green-50 p-3 rounded-lg\">\n                <Text className=\"text-xs text-green-700 font-medium\">Excelentes</Text>\n                <Metric className=\"text-green-800\">\n                  {metricas.categoriasExcelentes}\n                </Metric>\n              </div>\n              \n              <div className=\"bg-blue-50 p-3 rounded-lg\">\n                <Text className=\"text-xs text-blue-700 font-medium\">VariaÃ§Ã£o MÃ©dia</Text>\n                <Metric className={`${\n                  metricas.mediaVariacao >= 0 ? 'text-green-800' : 'text-red-800'\n                }`}>\n                  {metricas.mediaVariacao.toFixed(1)}%\n                </Metric>\n              </div>\n              \n              <div className=\"bg-red-50 p-3 rounded-lg\">\n                <Text className=\"text-xs text-red-700 font-medium\">CrÃ­ticas</Text>\n                <Metric className=\"text-red-800\">\n                  {metricas.categoriasCriticas}\n                </Metric>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Controles */}\n        <div className=\"flex flex-col gap-2\">\n          <Flex alignItems=\"center\" justifyContent=\"end\" className=\"gap-2\">\n            <Button size=\"xs\" variant=\"secondary\" icon={Filter}>\n              {filtroStatus === 'todos' ? 'Todos' : \n               filtroStatus === 'excelente' ? 'Excelentes' :\n               filtroStatus === 'bom' ? 'Bons' :\n               filtroStatus === 'regular' ? 'Regulares' : 'CrÃ­ticos'}\n            </Button>\n            {onExport && (\n              <Button size=\"xs\" variant=\"secondary\" icon={Download} onClick={onExport}>\n                Exportar\n              </Button>\n            )}\n          </Flex>\n        </div>\n      </Flex>\n\n      {/* Tabela */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"border-b-2 border-gray-200\">\n              <th className=\"text-left p-3\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"xs\" \n                  icon={ArrowUpDown}\n                  onClick={() => handleOrdenar('categoria')}\n                >\n                  {agrupamento === 'categoria' ? 'Categoria' :\n                   agrupamento === 'shopping' ? 'Shopping' :\n                   agrupamento === 'locatario' ? 'LocatÃ¡rio' : 'Fornecedor'}\n                </Button>\n              </th>\n              \n              <th className=\"text-right p-3\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"xs\" \n                  icon={ArrowUpDown}\n                  onClick={() => handleOrdenar('valor')}\n                >\n                  Valor Total\n                </Button>\n              </th>\n              \n              <th className=\"text-center p-3\">ParticipaÃ§Ã£o</th>\n              \n              <th className=\"text-right p-3\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"xs\" \n                  icon={ArrowUpDown}\n                  onClick={() => handleOrdenar('variacao')}\n                >\n                  VariaÃ§Ã£o\n                </Button>\n              </th>\n              \n              <th className=\"text-center p-3\">Status</th>\n              \n              {showMiniCharts && <th className=\"text-center p-3\">TendÃªncia</th>}\n              \n              <th className=\"text-right p-3\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"xs\" \n                  icon={ArrowUpDown}\n                  onClick={() => handleOrdenar('quantidade')}\n                >\n                  Qtd\n                </Button>\n              </th>\n              \n              <th className=\"text-center p-3\">AÃ§Ãµes</th>\n            </tr>\n          </thead>\n          \n          <tbody>\n            {dadosFiltrados.map((categoria, index) => (\n              <React.Fragment key={categoria.categoria}>\n                <tr \n                  className=\"border-b border-gray-100 hover:bg-gray-50 cursor-pointer transition-colors\"\n                  onClick={() => onCategoryClick && onCategoryClick(categoria.categoria)}\n                >\n                  <td className=\"p-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"w-4 h-4 rounded-full flex-shrink-0\" \n                        style={{ backgroundColor: categoria.cor }}\n                      />\n                      <div className=\"min-w-0\">\n                        <Text className=\"font-medium truncate\">{categoria.categoria}</Text>\n                        <Text className=\"text-xs text-gray-500\">\n                          {categoria.detalhes.principalItem && `Principal: ${categoria.detalhes.principalItem.substring(0, 20)}...`}\n                        </Text>\n                      </div>\n                    </div>\n                  </td>\n                  \n                  <td className=\"text-right p-3\">\n                    <Text className=\"font-semibold\">\n                      {formatarMoeda(categoria.valor)}\n                    </Text>\n                    <Text className=\"text-xs text-gray-500\">\n                      MÃ©dio: {formatarMoeda(categoria.valorMedio)}\n                    </Text>\n                  </td>\n                  \n                  <td className=\"text-center p-3\">\n                    <div className=\"flex items-center justify-center gap-2\">\n                      {showMiniCharts && <MiniPieChart data={categoria} />}\n                      <Text className=\"font-medium\">{categoria.percentual.toFixed(1)}%</Text>\n                    </div>\n                  </td>\n                  \n                  <td className=\"text-right p-3\">\n                    <div className=\"flex items-center justify-end gap-2\">\n                      {getStatusIcon(categoria.tendencia)}\n                      <Text className={`font-semibold ${\n                        categoria.variacao >= 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {categoria.variacao !== 0 ? `${categoria.variacao > 0 ? '+' : ''}${categoria.variacao.toFixed(1)}%` : '-'}\n                      </Text>\n                    </div>\n                  </td>\n                  \n                  <td className=\"text-center p-3\">\n                    {getStatusBadge(categoria.status)}\n                  </td>\n                  \n                  {showMiniCharts && (\n                    <td className=\"text-center p-3\">\n                      <MiniLineChart data={categoria} />\n                    </td>\n                  )}\n                  \n                  <td className=\"text-right p-3\">\n                    <Text className=\"font-medium\">{categoria.quantidade.toLocaleString()}</Text>\n                  </td>\n                  \n                  <td className=\"text-center p-3\">\n                    <Button \n                      size=\"xs\" \n                      variant=\"ghost\" \n                      icon={Eye}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setMostrarDetalhes(mostrarDetalhes === categoria.categoria ? null : categoria.categoria);\n                      }}\n                    >\n                    </Button>\n                  </td>\n                </tr>\n                \n                {/* Linha de detalhes expandida */}\n                {mostrarDetalhes === categoria.categoria && (\n                  <tr className=\"bg-gray-50\">\n                    <td colSpan={showMiniCharts ? 8 : 7} className=\"p-4\">\n                      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                        <div>\n                          <Text className=\"text-sm font-semibold mb-2\">Detalhes:</Text>\n                          <div className=\"space-y-1 text-sm\">\n                            <p><strong>Principal Item:</strong> {categoria.detalhes.principalItem || 'N/A'}</p>\n                            <p><strong>Ãšltima MovimentaÃ§Ã£o:</strong> {formatarData(categoria.detalhes.ultimaMovimentacao) || 'N/A'}</p>\n                            <p><strong>ObservaÃ§Ãµes:</strong> {categoria.detalhes.observacoes || 'N/A'}</p>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <Text className=\"text-sm font-semibold mb-2\">MÃ©tricas:</Text>\n                          <div className=\"space-y-1 text-sm\">\n                            <p><strong>Maior Valor:</strong> {formatarMoeda(categoria.metricas.maiorValor)}</p>\n                            <p><strong>Menor Valor:</strong> {formatarMoeda(categoria.metricas.menorValor)}</p>\n                            <p><strong>FrequÃªncia:</strong> {categoria.dadosTemporais.length} perÃ­odos</p>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <Text className=\"text-sm font-semibold mb-2\">HistÃ³rico (6 meses):</Text>\n                          <div className=\"h-20\">\n                            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                              <BarChart data={categoria.dadosTemporais.slice(-6)}>\n                                <XAxis dataKey=\"periodo\" tick={{ fontSize: 10 }} />\n                                <YAxis hide />\n                                <Bar dataKey=\"valor\" fill={categoria.cor} radius={[2, 2, 0, 0]} />\n                              </BarChart>\n                            </ResponsiveContainer>\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </React.Fragment>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Footer com informaÃ§Ãµes adicionais */}\n      <div className=\"mt-6 pt-4 border-t border-gray-200\">\n        <Flex alignItems=\"center\" justifyContent=\"between\">\n          <Text className=\"text-xs text-gray-500\">\n            Mostrando {dadosFiltrados.length} de {dadosProcessados.length} categorias\n          </Text>\n          <Text className=\"text-xs text-gray-500\">\n            Ãšltima atualizaÃ§Ã£o: {formatarData(new Date().toISOString())}\n          </Text>\n        </Flex>\n      </div>\n    </Card>\n  );\n};\n\nexport default TabelaAnaliseCategoria;"